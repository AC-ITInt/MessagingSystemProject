/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package messagesystem;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.net.Socket;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author andre
 */
public class UserJPanel extends javax.swing.JPanel {
    String userLabel;
    String activeUser;

    /**
     * Creates new form UserJPanel
     */
    public UserJPanel(String username, String user, Boolean followed) {
        initComponents();
        userLabel = username;
        activeUser = user;
        jLabel1.setText(userLabel);
        jButton1.setVisible(!followed);
        jButton2.setVisible(followed);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();

        jLabel1.setText("jLabel1");

        jButton1.setText("Follow");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Unfollow");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(40, 40, 40)
                .addComponent(jButton1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton2)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jButton1)
                    .addComponent(jButton2))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        try {
            
            Socket server = new Socket("localhost", 2624);
            server.setSoTimeout(5000);
            
            InputStream input = server.getInputStream();
            BufferedReader reader = new BufferedReader(new InputStreamReader(input));
            
            PrintWriter writer = new PrintWriter(server.getOutputStream(), true);
            
            System.out.println("Socket Opened");
            
            String outgoing = "SERVER FOLLOW " + userLabel + " " + activeUser;
            writer.println(outgoing);
            String incomingMessage = reader.readLine();
            if (incomingMessage.equals("CLIENT VALID FOLLOWED")) {
                MessageSystem.followingUser.add(userLabel);
                jButton1.setVisible(false);
                jButton2.setVisible(true);
            } else {
                System.out.println("Follow Error");
            }
        } catch (IOException ex) {
            Logger.getLogger(LoginDialog.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        try {
            
            Socket server = new Socket("localhost", 2624);
            server.setSoTimeout(5000);
            
            InputStream input = server.getInputStream();
            BufferedReader reader = new BufferedReader(new InputStreamReader(input));
            
            PrintWriter writer = new PrintWriter(server.getOutputStream(), true);
            
            System.out.println("Socket Opened");
            
            String outgoing = "SERVER UNFOLLOW " + userLabel + " " + activeUser;
            writer.println(outgoing);
            String incomingMessage = reader.readLine();
            if (incomingMessage.equals("CLIENT VALID UNFOLLOWED")) {
                MessageSystem.followingUser.remove(userLabel);
                jButton1.setVisible(true);
                jButton2.setVisible(false);
            } else {
                System.out.println("Unfollow Error");
            }
        } catch (IOException ex) {
            Logger.getLogger(LoginDialog.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton2ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    // End of variables declaration//GEN-END:variables
}
